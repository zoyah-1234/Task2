# 1. Add GitLab official repository
curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash

# 2. Install GitLab Runner
sudo apt-get install gitlab-runner -y

Go to your project → Settings > CI/CD > Runners

Expand "Set up a specific Runner manually"

Copy the URL and registration token
# Run registration
sudo gitlab-runner register

GitLab instance URL	     
https://gitlab.com/zoyah-1234
Registration token	

Description	
My Ubuntu Runner
Tags	
deploy
Executor	
shell
On your local machine, generate the key:

bash
Copy
Edit
ssh-keygen -t rsa -b 4096 -C "gitlab-runner"
Go to GitLab → Settings > CI/CD > Variables

Add new variable:

Key: SSH_PRIVATE_KEY

Value: (paste full private key)

Mark as Protected and Masked

Copy public key (from gitlab_key.pub)

Log into your Ubuntu server:

bash
Copy
Edit
mkdir -p ~/.ssh
echo "paste-public-key-here" >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
chmod 700 ~/.ssh
Setup on Server
On the Ubuntu server:

bash
Copy
Edit
# Clone your project repo
git clone git@gitlab.com:zoyah-1234/Task2-repo.git

# OR clone with HTTPS if SSH isn’t set up
git clone https://gitlab.com/zoyah-1234/Task-repo.git

# Navigate into project directory
cd Task-repo

# Test docker-compose manually
docker-compose up -d --build
Push Code & Trigger Deployment

stages:
  - deploy

deploy:
  stage: deploy
  tags:
    - deploy  # This must match the tag on your GitLab Runner
  only:
    - main    # Trigger only when pushing to main
  script:
    - echo "Installing SSH client..."
    - apt-get update -y && apt-get install -y openssh-client

    - echo "Starting SSH agent..."
    - eval $(ssh-agent -s)

    - echo "Adding private key to SSH agent..."
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - echo "Adding server to known_hosts..."
    - ssh-keyscan -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - echo "SSH into server and deploy..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST <<EOF
        cd $DEPLOY_PATH
        git pull origin main
        docker-compose down
        docker-compose up -d --build
      EOF

